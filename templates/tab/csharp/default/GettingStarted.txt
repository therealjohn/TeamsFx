Welcome to the Teams Toolkit! Here are some tips to get started to play with Teams Toolkit.

Quick start
----------

To run and debug Teams project on your local machine:

1. In Visual Studio Solution Explorer, right click on your project file and select "Teams Toolkit" -> "Prepare Teams app dependencies". You will be asked to login to your M365 account. This command will prepare local debug dependencies and register a Teams app in the tenant which your account belongs to.

Notes: your M365 account need to have the sideloading permission to ensure Teams app can be uploaded to your tenant, otherwise you will end up with failure to see your Teams app running in Teams client. Learn more about sideloading permission by visiting https://aka.ms/teamsfx-sideloading-option

2. Go to the "Debug" menu > click on "Start Debugging" or directly press F5. Visual Studio will launch the Teams app inside Microsoft Teams client in a browser. Learn more by visiting https://aka.ms/teamsfx-vs-debug.

Tips: you can use hotreload function of VS during debug. Learn more by visiting https://aka.ms/teamsfx-vs-hotreload.

3. Once Microsoft Teams is loaded, select the "Add" button to install your app in Teams.

Tips: 
1. if you want to launch the Teams app as a web app instead of running in Teams client, first remove the 'launchUrl' in \Properties\launchSettings.json, then right click on the solution, in Properties > Configuration Properties > Configuration, uncheck the 'Deploy' process and select 'OK'.

2. If you made changes to Teams app manifest file (/templates/appPackage/manifest.template.json), please right click on your project and select "Teams Toolkit" -> "Prepare Teams app dependencies" command before you try to locally run the Teams app again.

Building your Tab app
----------------------

Fluent UI is a front-end framework designed to build experiences that fit seamlessly into a broad range of Microsoft products. To make it simpler for you to build applications for Microsoft Teams, this template showcases Fluent UI Blazor components that are part of the Microsoft.Fast.Components.FluentUI package. Learn more about these components here: https://github.com/microsoft/fast-blazor.

If you want to know more about SDK usage, please check the GitHub page: https://github.com/OfficeDev/TeamsFx/tree/dev/packages/dotnet-sdk.


Deploy your Teams app on Azure
------------------------------------

To run your Teams app on Azure:

1. Right click on your project and select "Teams Toolkit" -> "Provision in the cloud..." to create resources in Azure for your app. You can select a proper subscription and resource group which you would like to use for your Teams app. Please be noted that this might cause charges to your Azure account. Learn more by visiting https://aka.ms/teamsfx-vs-provision.

2. Right click on your project and select "Teams Toolkit" -> "Deploy to the cloud...", this step will deploy your code to the Azure resources created in previous step. It is common to deploy multiple times to the same set of Azure resources, so there is no need to run "Provision in the cloud..." every time before run "Deploy to the cloud...". Both the commands will take several minutes to complete, please wait until it finished. Learn more by visiting https://aka.ms/teamsfx-vs-deploy.

3. Right click on your project and select "Teams Toolkit" -> "Preview in Teams" to launch your app in a browser. 

4. Once Microsoft Teams is loaded, select the "Add" button to install your app in Teams. You will see your app running remotely from Azure.

Notes: there is an alternative way to find all the commands mentioned above, go to the "Project" menu in Visual Studio, select "Teams Toolkit" and you will find all the commands there.

Tips: if you made changes to Teams app manifest file (/templates/appPackage/manifest.template.json), please right click on your project and select "Teams Toolkit" -> "Update manifest in Teams Developer Portal" command before you try to run the Teams app remotely from Azure again.

Report an issue
---------------

If you encountered any problem while you are building Teams app using Teams Toolkit, you can create an issue in our GitHub repository: https://github.com/OfficeDev/TeamsFx/issues


Q&A
---------------

1. How do I log out or switch my M365 account in Teams Toolkit?
   Right click on your project, select "Teams Toolkit" -> "Prepare Teams app dependencies". You can switch your M365 account in the pop up window.

2. How do I request more permissions and scopes in a Graph call?
   If you have selected Personal Tab capability and you want to change the scope in a Graph call, you can first change the parameter _scope in Components/Graph.razor. Then go to Azure Portal -> Azure Active Directory -> App Registrations, find the AAD application which Toolkit created for you (default name is the same name as the project name), under Manage, select API Permissions. Select Add a permission > Microsoft Graph > Delegated permissions, then add the permissions you want.
